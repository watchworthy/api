CREATE TABLE IF NOT EXISTS attendee
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id INTEGER,
    CONSTRAINT pk_attendee PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS comment_likes
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    comment_id  INTEGER,
    user_id     BIGINT,
    likes_count INTEGER,
    CONSTRAINT pk_commentlikes PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS comments
(
    id                INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text              VARCHAR(255),
    first_name        VARCHAR(255),
    last_name         VARCHAR(255),
    date_time_created TIMESTAMP WITHOUT TIME ZONE,
    movie_id          INTEGER,
    user_id           BIGINT,
    CONSTRAINT pk_comments PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS episode
(
    id            INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name          VARCHAR(255),
    overview      VARCHAR(1000),
    release_date  date,
    poster_path   VARCHAR(255),
    season_number INTEGER,
    season_id     INTEGER,
    CONSTRAINT pk_episode PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS event
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name        VARCHAR(255),
    date        date,
    poster_path VARCHAR(255),
    user_id     BIGINT,
    CONSTRAINT pk_event PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS genre
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255),
    CONSTRAINT pk_genre PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS movie
(
    id             INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title          VARCHAR(255),
    overview       VARCHAR(1000),
    release_date   date,
    poster_path    VARCHAR(255),
    average_rating DOUBLE PRECISION,
    CONSTRAINT pk_movie PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS movie_genre
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    movie_id INTEGER,
    genre_id INTEGER,
    CONSTRAINT pk_movie_genre PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS movie_person
(
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    movie_id  INTEGER,
    person_id INTEGER,
    CONSTRAINT pk_movie_person PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS movie_rates
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id  BIGINT,
    movie_id INTEGER,
    rate_num DOUBLE PRECISION,
    CONSTRAINT pk_movierates PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS notifications
(
    id                INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id           BIGINT,
    message           VARCHAR(255),
    date_time_created TIMESTAMP WITHOUT TIME ZONE,
    is_read           BOOLEAN                                  NOT NULL,
    CONSTRAINT pk_notifications PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS person
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name        VARCHAR(255),
    gender      VARCHAR(255),
    poster_path VARCHAR(255),
    biography   VARCHAR(1000),
    CONSTRAINT pk_person PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS roles
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255),
    CONSTRAINT pk_roles PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS season
(
    id            INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    air_date      VARCHAR(255),
    name          VARCHAR(255),
    overview      VARCHAR(255),
    poster_path   VARCHAR(255),
    season_number INTEGER,
    tvshow_id     INTEGER,
    CONSTRAINT pk_season PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS tv_show
(
    id                 INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title              VARCHAR(255),
    overview           VARCHAR(1000),
    release_date       date,
    poster_path        VARCHAR(255),
    average_rating     DOUBLE PRECISION,
    number_of_seasons  INTEGER,
    number_of_episodes INTEGER,
    in_production      BOOLEAN,
    status             VARCHAR(255),
    CONSTRAINT pk_tv_show PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS tvshow_genre
(
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    tvshow_id INTEGER,
    genre_id  INTEGER,
    CONSTRAINT pk_tvshow_genre PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS tvshow_person
(
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    tvshow_id INTEGER,
    person_id INTEGER,
    CONSTRAINT pk_tvshow_person PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS "user"
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email      VARCHAR(255),
    first_name VARCHAR(255),
    last_name  VARCHAR(255),
    password   VARCHAR(255),
    is_active  BOOLEAN                                 NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS watchlists
(
    id         INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id    BIGINT,
    movie_id   INTEGER,
    is_watched BOOLEAN                                  NOT NULL,
    CONSTRAINT pk_watchlists PRIMARY KEY (id)
);

ALTER TABLE attendee
    ADD CONSTRAINT FK_ATTENDEE_ON_EVENT FOREIGN KEY (event_id) REFERENCES event (id);

ALTER TABLE comments
    ADD CONSTRAINT FK_COMMENTS_ON_MOVIE FOREIGN KEY (movie_id) REFERENCES movie (id);

ALTER TABLE comments
    ADD CONSTRAINT FK_COMMENTS_ON_USER FOREIGN KEY (user_id) REFERENCES "user" (id);

ALTER TABLE movie_genre
    ADD CONSTRAINT FK_MOVIE_GENRE_ON_GENRE FOREIGN KEY (genre_id) REFERENCES genre (id);

ALTER TABLE movie_genre
    ADD CONSTRAINT FK_MOVIE_GENRE_ON_MOVIE FOREIGN KEY (movie_id) REFERENCES movie (id);

ALTER TABLE movie_person
    ADD CONSTRAINT FK_MOVIE_PERSON_ON_MOVIE FOREIGN KEY (movie_id) REFERENCES movie (id);

ALTER TABLE movie_person
    ADD CONSTRAINT FK_MOVIE_PERSON_ON_PERSON FOREIGN KEY (person_id) REFERENCES person (id);

ALTER TABLE episode
    ADD CONSTRAINT FK_SEASON_EPISODE_FK FOREIGN KEY (season_id) REFERENCES season (id);

ALTER TABLE tvshow_genre
    ADD CONSTRAINT FK_TVSHOW_GENRE_ON_GENRE FOREIGN KEY (genre_id) REFERENCES genre (id);

ALTER TABLE tvshow_genre
    ADD CONSTRAINT FK_TVSHOW_GENRE_ON_TVSHOW FOREIGN KEY (tvshow_id) REFERENCES tv_show (id);

ALTER TABLE tvshow_person
    ADD CONSTRAINT FK_TVSHOW_PERSON_ON_PERSON FOREIGN KEY (person_id) REFERENCES person (id);

ALTER TABLE tvshow_person
    ADD CONSTRAINT FK_TVSHOW_PERSON_ON_TVSHOW FOREIGN KEY (tvshow_id) REFERENCES tv_show (id);

ALTER TABLE season
    ADD CONSTRAINT FK_TVSHOW_SEASON_FK FOREIGN KEY (tvshow_id) REFERENCES tv_show (id);
